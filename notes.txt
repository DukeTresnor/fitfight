Developer notes
	Collisions
		Pushback needs to occur in the proper direction
			Pushback needs to be applied according to the amount given during signal
				output. How should this be determined? How do other games do it?
			I have a pushback "amount," but what does this mean in terms of actual
		 		gameplay? A pushback duration, a pushback amount, a pushback velocity?
			More research or theroycraffting is needed
		Pushback needs to apply to the attacker when in the corner
			Reference: https://game.capcom.com/cfn/sfv/column/131545?lang=en#:~:text=Pushback%3A%20Hit%2FBlock&text=The%20opponent%20is%20pushed%20back,its%20own%20unique%20pushback%20distance.
			Currently when a collision occurs, the player getting hit applies pushback
				to themselves according to data that was sent through signals at the
					time of collision. How to apply pushback to the attacker?
			One option is, at the time of collision, do a check on the defender's
				position. If their position is at the corner, then do 2 things:
					1. Don't send pushback information to the defender (or send 0
						pushback)
					2. Apply that pushback to the attacker
		How to determine the amount of pushback?
			Position vs Velocity
				I think using velocity is where I want to start.
				What would an actual argument for either one be?
			Velocity
				amount that is added increases then decreases to the its
					starting value in stun's debug print statement
				correct wording on above
				Multiple attacks applied to player should increase the amount
					added to the player's current velocity and over time move
					the attacked player away from the attacking player
				A place to investigate is stun.gd, in physics update,
					ie my code block that applies velocity		
	
	
	Input Buffer
		I have some implementation of input buffer that's a combination of two
			input buffer ideas.
		I have a movement_oder_queue that can handle diagonal inputs; next step
			is to combine the movement_order_queue with timestamps (/ timestamp 
			dictionary).
		move_right, neutral, move_right shows up as (1,0), (0,0), (1,0) inside
			the movement_order_queue. The game should respond with:
				1. transition from Idle to Walk state thanks to the first move_right buffer
					input
				2. transition from Walk to Idle state thanks to no input (ie thanks to the 
					(0, 0) input)
				3. transition from Idle to Dash state thanks to move_right buffer input
					seeing (1, 0) _and_ thanks to the difference between the two most
					recent keyboard_timestamps for that input being small enough _and_
					thanks to the movement_order_queue having its 3 most recent elements
					as (1,0), (0,0), (1,0).
			The second condition in step 3, ie the difference in timestamps being small
				enough, should be satisfied within is_action_press_buffered() thanks to
				the invalidate action call?
				Ie I should be able to insert some calls and adjustments within
					is_action_press_buffered() instead of making a whole new function 
		In states that could enter dash (ie Idle):
			if InputBuffer.is_action_press_buffered("move_right") and
				InputBuffer.movement_order_queue[-1] is (1,0) and
				InputBuffer.movement_order_queue[-2] is (0,0) and
				InputBuffer.movement_order_queue[-3] is (1,0),
					dash_direction = "right"
					transition to dash state with ("right") message
		In states that could enter fireball (ie Idle or attack_light):
			if InputBuffer.is_action_press_buffered("attack_light") and
				InputBuffer.movement_order_queue[-1] is (1,0) and
				InputBuffer.movement_order_queue[-2] is (1,-1) and
				InputBuffer.movement_order_queue[-3] is (0,-1),
					special_strength = "light"
					transition to fireball_special with ("light") message
		Hypothetically the implementation of the buffer window should handle
			gaps between movement and button inputs, but it might be too strict:
				"InputBuffer.movement_order_queue[-1] is (1,0)" might not work
				since any release of movement will make InputBuffer.movement_order_queue[-1]
				equal to (0, 0).
			Solution to this would be to only update the movement order queue inside
				is_action_press_buffered().
		Another problem with this implementation is that a diagonal-down-right input
			is registered as 1 update in movement_order_queue, but 2 in keyboard_timestamps.
			Doing down -> diagonal-down-right flags is_action_press_bufered() for a
			"double down" input, since diagonal-down-right is registered within
			keyboard_timestamps as separate down and right tick updates.
			Essentially doing a fireball motion under this system also "does" a down-down motion.
			It might work out fine since fireball checks movement_input_queue for three Vector2's,
				so once you input that 3rd command (ie right) into the attack button, the check
				for down-down fails since ....
				
			the movement_input_queue inherently might just make this work anyways...
			
			
	Adding new attacks
		New attacks need:
			attack animation in AnimatedSprite2D node
			a corresponding state node as a child of the StateMachine node
				this state node child should be added to the state_machine_nodes group
			a corresponding attack script
				should have a collision check function
				should have a signal function for taking damage: took_damage_in_"state"(damage)
				should have a linked signal that connects to player_1 (should be player eventually)
				should have a signal function for hitting with said attack:
					signal "attack"_hit(damage, pushback, \
						hitstun, block_pushback, blockstun)
				should have constants for the attack (all caps), as ATTACK_STRENGTH_:
					damage, pushback, hitstun, block_pushback, blockstun,
					repeat_number, duration, cancelable_frame
				should follow structure of current AttackLight script
					ie contains a reference to the corresponding Collision Area2D node, etc.
			in player_1 (player) script, any necessary print functions inside the
				took_damage_in_"state" signal calls
			a corresponding Area2D node (ie AttackMediumCollision) with hit and hurtboxes
				hit and hurtboxes should be CollisionShape2D nodes with RectangleShape2D shape
					parameters
				hit and hurtboxes should be Disabled by default
	
	
	Cancelable strings
		Current logic for canceling moves into others doesn't retrigger collisions,
			despite re-entering the proper attack state. Not sure of the solution
			just yet
	
	
	Character Builder
		Need to decouple the player class from the youmu_konpaku sprite
		Goal is to be able to transition from character select to the game scene
			and load a single file (like a json file) that contains the selected
			character's stats into a generic "player" instance
		As a part of the generalization, player_1 should change to player
			Be sure to be thorough in updating the proper references 
		
	Multiplayer Notes
		Local Multiplayer
			Explore:
				https://www.youtube.com/watch?v=ai331P2U1pE
				https://www.youtube.com/watch?v=9FcZFIqXOyA
			Issues:
				Right now my player script has dummy_enemy and player1 health bar
					references from the game scene. My goal is to have one
					player scene that I create instances of as children of the main
					game scene, but currently my implementation of the player script
					will not allow for this.
					Game
						Player1
							...
							scripts
								...
								player.gd
						Player2
							...
							scripts
								...
								player.gd
					Both Player1 and Player2 are instances of the player scene, and
						both have player.gd. Player1 needs a reference to Player1HealthBar
						and Player2, while Player2 needs a reference to Player2HealthBar
						and Player1.
					How do I differentiate between the 2 players? Does the player.gd
						script need 4 references? Most likely this gets addressed / solved
						using IDs, like with the inputs issue
					
				Try to explore the links above, see if it still works in the most
					current version.
				The videos themselves might only help to have multiple players
					use the same set of input actions, like "move_left" or
					"jump_neutral". The idea is to have each type of input action
					have two possible buttons / motions / etc. that trigger it,
					one for each of two different ids associated with each player.
					This would be done with the input editor itself I think.
				
					 
	
	Game
		Scenes
			Smooth transitions between game modes is needed
			Game
				Character Death
					When player health is empty, that player despawns
						Handle the despawn event and transition back to the
							menu scene
						
